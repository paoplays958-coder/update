// ============================================
// SISTEMA DE DETECÇÃO DE DISPOSITIVO
// ============================================
const DeviceManager = {
    isTouchDevice: false,
    isDesktop: false,
    
    init() {
        this.isTouchDevice = ('ontouchstart' in window) || (navigator.maxTouchPoints > 0);
        this.isDesktop = !this.isTouchDevice;
        console.log(`[Device] ${this.isTouchDevice ? 'Touch' : 'Desktop'} detectado`);
        return this;
    },
    
    addUniversalListener(element, events) {
        if (this.isTouchDevice) {
            element.addEventListener('touchstart', events.start);
            element.addEventListener('touchend', events.end);
            if (events.move) element.addEventListener('touchmove', events.move);
        } else {
            element.addEventListener('mousedown', events.start);
            element.addEventListener('mouseup', events.end);
            if (events.move) element.addEventListener('mousemove', events.move);
        }
    }
};

DeviceManager.init();

// ============================================
// JOYSTICK VIRTUAL (TOUCH)
// ============================================
const VirtualJoystick = {
    container: null,
    stick: null,
    active: false,
    startX: 0,
    startY: 0,
    currentX: 0,
    currentY: 0,
    maxDistance: 50,
    
    init() {
        if (!DeviceManager.isTouchDevice) return;
        
        // Container do Joystick
        this.container = document.createElement('div');
        this.container.style.cssText = `
            position: fixed;
            bottom: 120px;
            left: 30px;
            width: 120px;
            height: 120px;
            background: rgba(0, 0, 0, 0.3);
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            z-index: 999999;
            display: none;
        `;
        
        // Stick do Joystick
        this.stick = document.createElement('div');
        this.stick.style.cssText = `
            position: absolute;
            top: 35px;
            left: 35px;
            width: 50px;
            height: 50px;
            background: rgba(255, 255, 255, 0.6);
            border: 2px solid white;
            border-radius: 50%;
            transition: all 0.1s;
        `;
        
        this.container.appendChild(this.stick);
        document.body.appendChild(this.container);
        
        // Event Listeners
        this.container.addEventListener('touchstart', (e) => this.onStart(e));
        this.container.addEventListener('touchmove', (e) => this.onMove(e));
        this.container.addEventListener('touchend', () => this.onEnd());
        
        console.log('[Joystick] Inicializado');
    },
    
    show() {
        if (this.container) this.container.style.display = 'block';
    },
    
    hide() {
        if (this.container) this.container.style.display = 'none';
        this.reset();
    },
    
    onStart(e) {
        e.preventDefault();
        this.active = true;
        const rect = this.container.getBoundingClientRect();
        this.startX = rect.left + rect.width / 2;
        this.startY = rect.top + rect.height / 2;
    },
    
    onMove(e) {
        if (!this.active) return;
        e.preventDefault();
        
        const touch = e.touches[0];
        const deltaX = touch.clientX - this.startX;
        const deltaY = touch.clientY - this.startY;
        
        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        const limitedDistance = Math.min(distance, this.maxDistance);
        const angle = Math.atan2(deltaY, deltaX);
        
        this.currentX = Math.cos(angle) * limitedDistance;
        this.currentY = Math.sin(angle) * limitedDistance;
        
        // Atualizar posição visual
        this.stick.style.transform = `translate(${this.currentX}px, ${this.currentY}px)`;
    },
    
    onEnd() {
        this.active = false;
        this.reset();
    },
    
    reset() {
        this.currentX = 0;
        this.currentY = 0;
        this.stick.style.transform = 'translate(0, 0)';
    },
    
    getVector() {
        return {
            x: this.currentX / this.maxDistance,
            y: this.currentY / this.maxDistance
        };
    }
};

// ============================================
// BOTÕES DE CONTROLE TOUCH
// ============================================
const TouchControls = {
    buttons: {},
    
    init() {
        if (!DeviceManager.isTouchDevice) return;
        
        this.createButton('up', '↑', 'right: 30px; bottom: 250px;', () => {
            FlySystem.keys.space = true;
        }, () => {
            FlySystem.keys.space = false;
        });
        
        this.createButton('down', '↓', 'right: 30px; bottom: 170px;', () => {
            FlySystem.keys.shift = true;
        }, () => {
            FlySystem.keys.shift = false;
        });
        
        console.log('[TouchControls] Inicializado');
    },
    
    createButton(id, text, position, onPress, onRelease) {
        const button = document.createElement('div');
        button.id = `touch-btn-${id}`;
        button.innerHTML = text;
        button.style.cssText = `
            position: fixed;
            ${position}
            width: 60px;
            height: 60px;
            background: rgba(0, 0, 0, 0.5);
            border: 2px solid white;
            border-radius: 50%;
            color: white;
            font-size: 24px;
            font-weight: bold;
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 999999;
            user-select: none;
            -webkit-user-select: none;
        `;
        
        button.addEventListener('touchstart', (e) => {
            e.preventDefault();
            button.style.background = 'rgba(255, 255, 255, 0.3)';
            onPress();
        });
        
        button.addEventListener('touchend', (e) => {
            e.preventDefault();
            button.style.background = 'rgba(0, 0, 0, 0.5)';
            onRelease();
        });
        
        document.body.appendChild(button);
        this.buttons[id] = button;
    },
    
    show() {
        Object.values(this.buttons).forEach(btn => btn.style.display = 'flex');
    },
    
    hide() {
        Object.values(this.buttons).forEach(btn => btn.style.display = 'none');
    }
};

// ============================================
// FLY SYSTEM ATUALIZADO (Híbrido)
// ============================================
const FlySystem = {
    enabled: false,
    speed: 2,
    keys: { w: false, a: false, s: false, d: false, space: false, shift: false },
    
    toggle() {
        this.enabled = !this.enabled;
        
        if (this.enabled) {
            this.start();
        } else {
            this.stop();
        }
    },
    
    start() {
        console.log('[Fly] Ativado');
        
        if (DeviceManager.isDesktop) {
            window.addEventListener('keydown', this.handleKeyDown);
            window.addEventListener('keyup', this.handleKeyUp);
        } else {
            VirtualJoystick.show();
            TouchControls.show();
        }
        
        this.update();
    },
    
    stop() {
        console.log('[Fly] Desativado');
        
        if (DeviceManager.isDesktop) {
            window.removeEventListener('keydown', this.handleKeyDown);
            window.removeEventListener('keyup', this.handleKeyUp);
        } else {
            VirtualJoystick.hide();
            TouchControls.hide();
        }
        
        this.keys = { w: false, a: false, s: false, d: false, space: false, shift: false };
    },
    
    handleKeyDown(e) {
        const key = e.key.toLowerCase();
        if (key in FlySystem.keys) FlySystem.keys[key] = true;
    },
    
    handleKeyUp(e) {
        const key = e.key.toLowerCase();
        if (key in FlySystem.keys) FlySystem.keys[key] = false;
    },
    
    update() {
        if (!this.enabled) return;
        
        const player = game.Players.LocalPlayer;
        if (!player || !player.Character || !player.Character.PrimaryPart) {
            requestAnimationFrame(() => this.update());
            return;
        }
        
        const root = player.Character.PrimaryPart;
        const camera = game.Workspace.CurrentCamera;
        
        let moveX = 0, moveY = 0, moveZ = 0;
        
        if (DeviceManager.isDesktop) {
            // Controles Desktop (WASD)
            if (this.keys.w) moveZ -= 1;
            if (this.keys.s) moveZ += 1;
            if (this.keys.a) moveX -= 1;
            if (this.keys.d) moveX += 1;
        } else {
            // Controles Touch (Joystick)
            const joy = VirtualJoystick.getVector();
            moveX = joy.x;
            moveZ = joy.y;
        }
        
        // Subir/Descer (Ambos)
        if (this.keys.space) moveY += 1;
        if (this.keys.shift) moveY -= 1;
        
        // Aplicar movimento
        if (moveX !== 0 || moveY !== 0 || moveZ !== 0) {
            const cameraLook = camera.CFrame.LookVector;
            const cameraRight = camera.CFrame.RightVector;
            
            const forward = new Instance('Vector3', cameraLook.X, 0, cameraLook.Z).Unit.mul(moveZ * this.speed);
            const right = new Instance('Vector3', cameraRight.X, 0, cameraRight.Z).Unit.mul(moveX * this.speed);
            const up = new Instance('Vector3', 0, moveY * this.speed, 0);
            
            const newPos = root.Position.add(forward).add(right).add(up);
            root.CFrame = new Instance('CFrame', newPos);
        }
        
        requestAnimationFrame(() => this.update());
    }
};

// ============================================
// INICIALIZAÇÃO
// ============================================
VirtualJoystick.init();
TouchControls.init();

// ============================================
// INTERFACE ADAPTATIVA
// ============================================
// Adicione isto à função createMenuButton para adaptar tamanho
function createMenuButton(text, onClick) {
    const button = document.createElement('button');
    button.textContent = text;
    
    const baseSize = DeviceManager.isTouchDevice ? '14px' : '11px';
    const padding = DeviceManager.isTouchDevice ? '12px' : '8px';
    
    button.style.cssText = `
        width: 100%;
        padding: ${padding};
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        font-size: ${baseSize};
        cursor: pointer;
        transition: all 0.2s;
        border-radius: 4px;
        font-family: 'Segoe UI', sans-serif;
    `;
    
    DeviceManager.addUniversalListener(button, {
        start: () => {
            button.style.background = 'rgba(255, 255, 255, 0.2)';
            button.style.transform = 'scale(0.95)';
        },
        end: () => {
            button.style.background = 'rgba(255, 255, 255, 0.1)';
            button.style.transform = 'scale(1)';
            onClick();
        }
    });
    
    return button;
}
